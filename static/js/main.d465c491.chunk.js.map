{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","state","workflowValue","checkWorkflow","workflowValid","handleChange","event","console","log","currentTarget","value","_this","setState","checkIfWorkflowIsValid","isWorkflowValid","getWorkflowStatusDescription","getResultClassName","react_default","a","createElement","className","onClick","this","concat","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAgEeA,6MA1DbC,MAAQ,CACNC,cAAe,GACfC,eAAe,EACfC,eAAe,KAKjBC,aAAe,SAACC,GACdC,QAAQC,IAAIF,EAAMG,cAAcC,OAChCC,EAAKC,SAAS,CACZV,cAAeI,EAAMG,cAAcC,MACnCP,eAAe,OAInBU,uBAAyB,WAGvBF,EAAKC,SAAS,CACZR,cAAeU,0BAAgBH,EAAKV,MAAMC,eAC1CC,eAAe,OAInBY,6BAA+B,WAC7B,OAAOJ,EAAKV,MAAMG,cAAgB,oBAAsB,2BAG1DY,mBAAqB,WACnB,OAAGL,EAAKV,MAAME,cACL,GAGFQ,EAAKV,MAAMG,cAAgB,UAAY,sFAK9C,OADAG,QAAQC,IAAIM,mBAEVG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAASH,EAAAC,EAAAC,cAAA,4CACxBF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,UAAQE,QAASC,KAAKT,wBAAtB,kBACAI,EAAAC,EAAAC,cAAA,OAAKC,UAAS,UAAAG,OAAYD,KAAKN,uBAA/B,IAAyDM,KAAKrB,MAAME,cAAgB,iCAAmCmB,KAAKP,iCAE9HE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,YACET,MAAOY,KAAKrB,MAAMC,cAClBsB,SAAUF,KAAKjB,gBAGnBY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,wDArDUK,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d465c491.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {isWorkflowValid} from 'github-actions-validator'\n\nclass App extends Component {\n  state = {\n    workflowValue: '',\n    checkWorkflow: true,\n    workflowValid: false,\n  }\n\n\n  \n  handleChange = (event:React.FormEvent<HTMLTextAreaElement>) => {\n    console.log(event.currentTarget.value)\n    this.setState({\n      workflowValue: event.currentTarget.value,\n      checkWorkflow: true,\n    })\n  }\n\n  checkIfWorkflowIsValid = () => {\n    // console.log(isWorkflowValid(this.state.workflowValue));\n    \n    this.setState({\n      workflowValid: isWorkflowValid(this.state.workflowValue),\n      checkWorkflow: false\n    })\n  }\n\n  getWorkflowStatusDescription = () =>{\n    return this.state.workflowValid ? 'Workflow is valid' : 'Workflow is not valid'\n  }\n\n  getResultClassName = () =>{\n    if(this.state.checkWorkflow){\n      return ''\n    }\n\n    return this.state.workflowValid ? 'isValid' : 'isNotValid'\n  }\n\n  render() {\n    console.log(isWorkflowValid)\n    return (\n      <div className=\"grid-container\">\n        <div className=\"header\"><h1>Github Actions Validator Demo</h1></div>\n        <div className=\"check\">\n          <button onClick={this.checkIfWorkflowIsValid}>Check Workflow</button>\n          <div className={`result ${this.getResultClassName()}`}> {this.state.checkWorkflow ? 'Click button to check workflow' : this.getWorkflowStatusDescription() }</div>\n        </div>\n        <div className=\"input\">\n          <textarea\n            value={this.state.workflowValue}\n            onChange={this.handleChange}\n          />\n        </div>\n        <div className=\"footer\">&copy; 2018-2019 Aleksander \"Feridum\" Patschek</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}